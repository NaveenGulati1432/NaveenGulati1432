{
	"name": "dataflow_death_cases",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "death_cases",
						"type": "DatasetReference"
					},
					"name": "casedeath"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_data",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "AsiaCountry",
					"description": "\n"
				},
				{
					"name": "selectrequiredcolumns",
					"description": "Renaming AsiaCountry to selectrequiredcolumns with columns 'country, country_code, population, indicator, daily_count, source,date'"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> casedeath",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"casedeath filter(continent == 'Asia') ~> AsiaCountry",
				"AsiaCountry select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          date,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectrequiredcolumns",
				"selectrequiredcolumns pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date,",
				"          country_special = country+country_code),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1",
				"pivot1, source1 lookup(pivot1@country == source1@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = pivot1@country,",
				"          country_code,",
				"          population = pivot1@population,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source,",
				"          reported_date,",
				"          {countconfirmed cases},",
				"          country_special,",
				"          countdeaths,",
				"          country = source1@country,",
				"          population = source1@population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}